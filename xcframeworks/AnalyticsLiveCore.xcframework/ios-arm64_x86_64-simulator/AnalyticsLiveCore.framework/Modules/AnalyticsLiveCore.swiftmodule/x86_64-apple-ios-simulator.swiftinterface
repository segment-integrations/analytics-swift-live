// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0 effective-5.10 (swiftlang-6.0.0.9.10 clang-1600.0.26.2)
// swift-module-flags: -target x86_64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name AnalyticsLiveCore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import JSONSafeEncoding
import JavaScriptCore
import OSLog
import Segment
import Substrata
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public func ____setSignalsDebugging(value: Swift.Bool) -> Swift.Bool
public class DestinationFilters : Segment.UtilityPlugin {
  final public let type: Segment.PluginType
  public var analytics: Segment.Analytics?
  public init()
  public func configure(analytics: Segment.Analytics)
  public func update(settings: Segment.Settings, type: Segment.UpdateType)
  @objc deinit
}
extension AnalyticsLiveCore.DestinationFilters : AnalyticsLiveCore.LivePluginsDependent {
  public func prepare(engine: Substrata.JSEngine)
  public func readyToStart()
  public func teardown(engine: Substrata.JSEngine)
}
public class MetricsPlugin : Segment.Plugin {
  final public let type: Segment.PluginType
  public var analytics: Segment.Analytics?
  public init(setOfActiveDestinations: Swift.Set<Swift.String>)
  public func configure(analytics: Segment.Analytics)
  public func execute<T>(event: T?) -> T? where T : Segment.RawEvent
  @objc deinit
}
@_inheritsConvenienceInitializers public class AnalyticsJS : Substrata.JSExport {
  required public init()
  public init(wrapping analytics: Segment.Analytics)
  @objc deinit
  override public func construct(args: [(any Substrata.JSConvertible)?])
  public func track(args: [(any Substrata.JSConvertible)?]) -> (any Substrata.JSConvertible)?
  public func identify(args: [(any Substrata.JSConvertible)?]) -> (any Substrata.JSConvertible)?
  public func screen(args: [(any Substrata.JSConvertible)?]) -> (any Substrata.JSConvertible)?
  public func group(args: [(any Substrata.JSConvertible)?]) -> (any Substrata.JSConvertible)?
  public func alias(args: [(any Substrata.JSConvertible)?]) -> (any Substrata.JSConvertible)?
  public func flush(args: [(any Substrata.JSConvertible)?]) -> (any Substrata.JSConvertible)?
  public func reset(args: [(any Substrata.JSConvertible)?]) -> (any Substrata.JSConvertible)?
  public func add(args: [(any Substrata.JSConvertible)?]) -> (any Substrata.JSConvertible)?
  public func removeLivePlugins(args: [(any Substrata.JSConvertible)?]) -> (any Substrata.JSConvertible)?
}
public struct EmbeddedJS {
  public static let enumSetupScript: Swift.String
  public static let edgeFnBaseSetupScript: Swift.String
  public static let signalsBaseSetupScript: Swift.String
}
public protocol LivePluginsDependent {
  func prepare(engine: Substrata.JSEngine)
  func readyToStart()
  func teardown(engine: Substrata.JSEngine)
}
public class LivePlugins : Segment.UtilityPlugin {
  final public let type: Segment.PluginType
  weak public var analytics: Segment.Analytics?
  public var engine: Substrata.JSEngine
  public init(fallbackFileURL: Foundation.URL?)
  @objc deinit
  public func configure(analytics: Segment.Analytics)
  public func update(settings: Segment.Settings, type: Segment.UpdateType)
  public func addDependent(plugin: any AnalyticsLiveCore.LivePluginsDependent)
}
extension Swift.Dictionary where Key == Swift.String {
  public func toJSConvertible() -> [Swift.String : any Substrata.JSConvertible]
  public func valueToInt(for key: Swift.String) -> Swift.Int?
  public func valueToString(for key: Swift.String) -> Swift.String?
}
@objc @_inheritsConvenienceInitializers public class SignalsNetworkProtocol : Foundation.URLProtocol, Foundation.URLSessionDataDelegate {
  @objc override dynamic public init(request: Foundation.URLRequest, cachedResponse: Foundation.CachedURLResponse?, client: (any Foundation.URLProtocolClient)?)
  @objc override dynamic public class func canInit(with request: Foundation.URLRequest) -> Swift.Bool
  @objc override dynamic public func startLoading()
  @objc override dynamic public func stopLoading()
  @objc override dynamic public class func canonicalRequest(for request: Foundation.URLRequest) -> Foundation.URLRequest
  @objc public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc deinit
}
extension AnalyticsLiveCore.SignalsNetworkProtocol {
  public typealias BodyDeserializer = (Foundation.Data?) -> [Swift.String : Any]?
  public static var deserializers: [Swift.String : AnalyticsLiveCore.SignalsNetworkProtocol.BodyDeserializer]
  public static var textPlain: (_ body: Foundation.Data?) -> [Swift.String : Any]?
  public static var applicationJSON: (_ body: Foundation.Data?) -> [Swift.String : Any]?
  public static func addDeserializer(for contentType: Swift.String, deserializer: @escaping AnalyticsLiveCore.SignalsNetworkProtocol.BodyDeserializer)
}
extension UIKit.UIApplication {
  @objc @_Concurrency.MainActor @preconcurrency dynamic public func seg__sendEvent(_ event: UIKit.UIEvent)
}
public class DebugBroadcaster : AnalyticsLiveCore.SignalJSONBroadcaster {
  weak public var analytics: Segment.Analytics?
  public var signals: [any AnalyticsLiveCore.RawSignal]
  public var last: (any AnalyticsLiveCore.RawSignal)? {
    get
  }
  public func added(signal: [Swift.String : Any])
  public func added(signal: any AnalyticsLiveCore.RawSignal)
  public func relay()
  public init()
  @objc deinit
}
public class SegmentBroadcaster : AnalyticsLiveCore.SignalBroadcaster {
  weak public var analytics: Segment.Analytics? {
    get
    set
  }
  public func added(signal: any AnalyticsLiveCore.RawSignal)
  public func relay()
  public init()
  @objc deinit
}
public class SessionRecorder : AnalyticsLiveCore.SignalBroadcaster {
  weak public var analytics: Segment.Analytics?
  public var signals: [any AnalyticsLiveCore.RawSignal]
  final public let recordingURL: Foundation.URL
  public init(recordingFile: Swift.String)
  public func added(signal: any AnalyticsLiveCore.RawSignal)
  public func relay()
  @objc deinit
}
public class WebhookBroadcaster : AnalyticsLiveCore.SignalBroadcaster {
  weak public var analytics: Segment.Analytics?
  public init(url: Foundation.URL)
  public func added(signal: any AnalyticsLiveCore.RawSignal)
  public func relay()
  @objc deinit
}
extension AnalyticsLiveCore.Signals {
  public struct Configuration {
    public static let allowAllHosts: Swift.String
    public static let autoBlockedHosts: [Swift.String]
    public let writeKey: Swift.String
    public let maximumBufferSize: Swift.Int
    public let relayCount: Swift.Int
    public let relayInterval: Foundation.TimeInterval
    public let broadcasters: [any AnalyticsLiveCore.SignalBroadcaster]?
    public let useUIKitAutoSignal: Swift.Bool
    public let useSwiftUIAutoSignal: Swift.Bool
    public let useNetworkAutoSignal: Swift.Bool
    public let allowedNetworkHosts: [Swift.String]
    public let blockedNetworkHosts: [Swift.String]
    public init(writeKey: Swift.String, maximumBufferSize: Swift.Int = 1000, relayCount: Swift.Int = 20, relayInterval: Foundation.TimeInterval = 60, broadcasters: [any AnalyticsLiveCore.SignalBroadcaster]? = [SegmentBroadcaster()], useUIKitAutoSignal: Swift.Bool = false, useSwiftUIAutoSignal: Swift.Bool = false, useNetworkAutoSignal: Swift.Bool = false, allowedNetworkHosts: [Swift.String] = [Self.allowAllHosts], blockedNetworkHosts: [Swift.String] = [])
  }
}
@_hasMissingDesignatedInitializers public class Signals : Segment.Plugin, AnalyticsLiveCore.LivePluginsDependent {
  public var type: Segment.PluginType
  weak public var analytics: Segment.Analytics?
  public var anonymousId: Swift.String {
    get
  }
  public var nextIndex: Swift.Int {
    get
  }
  public static let shared: AnalyticsLiveCore.Signals
  public func configure(analytics: Segment.Analytics)
  public func execute<T>(event: T?) -> T? where T : Segment.RawEvent
  public func flush()
  public func useConfiguration(_ configuration: AnalyticsLiveCore.Signals.Configuration)
  public func emit<T>(signal: T, source: AnalyticsLiveCore.SignalSource = .manual) where T : AnalyticsLiveCore.RawSignal
  public func buffer() -> [any Substrata.JSConvertible]?
  public static func emit<T>(signal: T, source: AnalyticsLiveCore.SignalSource = .manual) where T : AnalyticsLiveCore.RawSignal
  @objc deinit
}
extension AnalyticsLiveCore.Signals {
  public func prepare(engine: Substrata.JSEngine)
  public func readyToStart()
  public func teardown(engine: Substrata.JSEngine)
}
public protocol SignalBroadcaster {
  var analytics: Segment.Analytics? { get set }
  func added(signal: any AnalyticsLiveCore.RawSignal)
  func relay()
}
public protocol SignalJSONBroadcaster : AnalyticsLiveCore.SignalBroadcaster {
  func added(signal: [Swift.String : Any])
}
public protocol Signaling {
}
public enum SignalSource {
  case autoNetwork
  case autoSwiftUI
  case autoUIKit
  case manual
  public static func == (a: AnalyticsLiveCore.SignalSource, b: AnalyticsLiveCore.SignalSource) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public enum SignalType : Swift.String, Swift.Codable {
  case interaction
  case navigation
  case network
  case localData
  case instrumentation
  case userDefined
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
#if compiler(>=5.3) && $PrimaryAssociatedTypes2
public protocol RawSignal<T> : Swift.Decodable, Swift.Encodable {
  associatedtype T : Swift.Decodable, Swift.Encodable
  var anonymousId: Swift.String { get set }
  var type: AnalyticsLiveCore.SignalType { get set }
  var timestamp: Swift.String { get set }
  var index: Swift.Int { get set }
  var data: Self.T { get set }
}
#else
public protocol RawSignal : Swift.Decodable, Swift.Encodable {
  associatedtype T : Swift.Decodable, Swift.Encodable
  var anonymousId: Swift.String { get set }
  var type: AnalyticsLiveCore.SignalType { get set }
  var timestamp: Swift.String { get set }
  var index: Swift.Int { get set }
  var data: Self.T { get set }
}
#endif
public struct NavigationSignal : AnalyticsLiveCore.RawSignal {
  public enum NavigationAction : Swift.String, Swift.Codable {
    case forward
    case backward
    case modal
    case entering
    case leaving
    case page
    case popup
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct NavigationData : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var anonymousId: Swift.String
  public var type: AnalyticsLiveCore.SignalType
  public var timestamp: Swift.String
  public var index: Swift.Int
  public var data: AnalyticsLiveCore.NavigationSignal.NavigationData
  public init(action: AnalyticsLiveCore.NavigationSignal.NavigationAction, screen: Swift.String)
  public typealias T = AnalyticsLiveCore.NavigationSignal.NavigationData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InteractionSignal : AnalyticsLiveCore.RawSignal {
  public struct InteractionData : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var anonymousId: Swift.String
  public var type: AnalyticsLiveCore.SignalType
  public var timestamp: Swift.String
  public var index: Swift.Int
  public var data: AnalyticsLiveCore.InteractionSignal.InteractionData
  public init(component: Swift.String, title: Swift.String? = nil, data: [Swift.String : Any]? = nil)
  public typealias T = AnalyticsLiveCore.InteractionSignal.InteractionData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct NetworkSignal : AnalyticsLiveCore.RawSignal {
  public enum NetworkAction : Swift.String, Swift.Codable {
    case request
    case response
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct NetworkData : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var anonymousId: Swift.String
  public var type: AnalyticsLiveCore.SignalType
  public var timestamp: Swift.String
  public var index: Swift.Int
  public var data: AnalyticsLiveCore.NetworkSignal.NetworkData
  public init(action: AnalyticsLiveCore.NetworkSignal.NetworkAction, url: Foundation.URL, statusCode: Swift.Int? = nil, data: [Swift.String : Any]? = nil)
  public typealias T = AnalyticsLiveCore.NetworkSignal.NetworkData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct LocalDataSignal : AnalyticsLiveCore.RawSignal {
  public enum LocalDataAction : Swift.String, Swift.Codable {
    case loaded
    case updated
    case saved
    case deleted
    case undefined
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct LocalData : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var anonymousId: Swift.String
  public var type: AnalyticsLiveCore.SignalType
  public var timestamp: Swift.String
  public var index: Swift.Int
  public var data: AnalyticsLiveCore.LocalDataSignal.LocalData
  public init(action: AnalyticsLiveCore.LocalDataSignal.LocalDataAction, identifier: Swift.String, data: [Swift.String : Any]? = nil)
  public typealias T = AnalyticsLiveCore.LocalDataSignal.LocalData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public struct InstrumentationSignal : AnalyticsLiveCore.RawSignal {
  public enum EventType : Swift.String, Swift.Codable {
    case track
    case screen
    case identify
    case group
    case alias
    case unknown
    public init?(rawValue: Swift.String)
    public typealias RawValue = Swift.String
    public var rawValue: Swift.String {
      get
    }
  }
  public struct InstrumentationData : Swift.Codable {
    public func encode(to encoder: any Swift.Encoder) throws
    public init(from decoder: any Swift.Decoder) throws
  }
  public var anonymousId: Swift.String
  public var type: AnalyticsLiveCore.SignalType
  public var timestamp: Swift.String
  public var index: Swift.Int
  public var data: AnalyticsLiveCore.InstrumentationSignal.InstrumentationData
  public init(event: any Segment.RawEvent)
  public typealias T = AnalyticsLiveCore.InstrumentationSignal.InstrumentationData
  public func encode(to encoder: any Swift.Encoder) throws
  public init(from decoder: any Swift.Decoder) throws
}
public protocol JSONObfuscation {
  func obfuscated() -> any AnalyticsLiveCore.RawSignal
}
extension AnalyticsLiveCore.LocalDataSignal : AnalyticsLiveCore.JSONObfuscation {
  public func obfuscated() -> any AnalyticsLiveCore.RawSignal
}
extension AnalyticsLiveCore.InstrumentationSignal : AnalyticsLiveCore.JSONObfuscation {
  public func obfuscated() -> any AnalyticsLiveCore.RawSignal
}
extension AnalyticsLiveCore.NetworkSignal : AnalyticsLiveCore.JSONObfuscation {
  public func obfuscated() -> any AnalyticsLiveCore.RawSignal
}
extension AnalyticsLiveCore.SignalSource : Swift.Equatable {}
extension AnalyticsLiveCore.SignalSource : Swift.Hashable {}
extension AnalyticsLiveCore.SignalType : Swift.Equatable {}
extension AnalyticsLiveCore.SignalType : Swift.Hashable {}
extension AnalyticsLiveCore.SignalType : Swift.RawRepresentable {}
extension AnalyticsLiveCore.NavigationSignal.NavigationAction : Swift.Equatable {}
extension AnalyticsLiveCore.NavigationSignal.NavigationAction : Swift.Hashable {}
extension AnalyticsLiveCore.NavigationSignal.NavigationAction : Swift.RawRepresentable {}
extension AnalyticsLiveCore.NetworkSignal.NetworkAction : Swift.Equatable {}
extension AnalyticsLiveCore.NetworkSignal.NetworkAction : Swift.Hashable {}
extension AnalyticsLiveCore.NetworkSignal.NetworkAction : Swift.RawRepresentable {}
extension AnalyticsLiveCore.LocalDataSignal.LocalDataAction : Swift.Equatable {}
extension AnalyticsLiveCore.LocalDataSignal.LocalDataAction : Swift.Hashable {}
extension AnalyticsLiveCore.LocalDataSignal.LocalDataAction : Swift.RawRepresentable {}
extension AnalyticsLiveCore.InstrumentationSignal.EventType : Swift.Equatable {}
extension AnalyticsLiveCore.InstrumentationSignal.EventType : Swift.Hashable {}
extension AnalyticsLiveCore.InstrumentationSignal.EventType : Swift.RawRepresentable {}
